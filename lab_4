;Лебедев Аркадий, Михаил Тверитнев
(define stack-data '())
(define dict '())
(define call/cc call-with-current-continuation)
(define char-letter? char-alphabetic?)
(define char-digit? char-numeric?)
(define-syntax safe-cons
  (syntax-rules()
    ((safe-cons head tail)
     (let*
         ((gl head)
          (hv tail))
       (cons gl hv)))))
(define-syntax trace-ex
  (syntax-rules ()
    ((trace-ex expr)
     (begin (write 'expr)
            (display " => ")
            (let ((x expr))
              (write x)
              (newline)
              x)))))
;; Управление стеком
(define (list-drop lst)
  (and (> (length lst) 0) (cdr lst)))
(define (list-swap lst)
  (and (> (length lst) 1) (safe-cons (cadr lst) (safe-cons (car lst) (cddr lst)))))
(define (list-dup lst)
  (cons (car lst) (safe-cons (car lst) (cdr lst))))
(define (list-over lst)
  (and (> (length lst) 1) (safe-cons (cadr (reverse lst)) (cdr list))))
(define (list-rot lst)
  (and (> (length lst) 2) (safe-cons (caddr lst) (safe-cons (cadr lst) (safe-cons (car lst) (cdddr lst))))))
(define (list-depth lst)
  (safe-cons (length lst) lst))
;;
(define (interpret program stack);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (set! stack-data stack)
  (do-all (vector->list program) (vector->list program) 0 '()))

(define (interpret-dict program)
  (do-all program program 0 '()))

(define (interpret-define arr-words now-program word-counter stack-return)
  (let ((x (car now-program)))
    (if (equal? x 'end)
        (begin
          (set! dict (cons  (cons  (car stack-return)  (list (cdr stack-return))) dict))
          (do-all arr-words (cdr now-program) (+ 1 word-counter) '()))
        (interpret-define arr-words (cdr now-program) (+ 1 word-counter) (append stack-return (list x))))))
  

(define (func-call curr-stack dict)
  (if (assoc func-call dict)
      (do-all curr-stack curr-stack 0 '())))

#|
(define (last-two-elements-of-list xs)
  (let ((reversed-xs (reverse xs)))
    (list (cadr reversed-xs) (car reversed-xs) )))
|#
  
(define (do-all arr-words now-program word-counter stack-return)
  (display word-counter)
  (display stack-data)
  (newline)
  #|
  (display word-counter)
  (display dict)
  (newline)
  (display stack-data)
  (newline)
  (display now-program)
  (newline)
  |#
  (let ((program arr-words))
    (cond((=(length arr-words)word-counter)   stack-data)
         ((number? (car now-program))
          (set! stack-data (safe-cons (car now-program) stack-data))
          (do-all arr-words (cdr now-program) (+ 1 word-counter) stack-return))
         (else (let ((x (car now-program)))
                 (cond
                   ((equal? x 'exit) (display x) stack-data)
                   ;; Aрифметические операции
                   ((equal? x '+)
                    (set! stack-data (safe-cons (+ (car stack-data) (cadr stack-data)) (cddr stack-data)))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter)  stack-return))
                   ((equal? x '-)
                    (set! stack-data (safe-cons (-(cadr stack-data) (car stack-data) ) (cddr stack-data)))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter)  stack-return))
                   ((equal? x '*)
                    (set! stack-data (safe-cons (* (car stack-data) (cadr stack-data)) (cddr stack-data)))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter) stack-return))
                   ((equal? x '/)
                    (set! stack-data (safe-cons (/ (car stack-data) (cadr stack-data)) (cddr stack-data)))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter)   stack-return ))
                   ((equal? x 'mod)
                    (set! stack-data (safe-cons (remainder (car stack-data) (cadr stack-data)) (cddr stack-data)))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter) stack-return))
                   ((equal? x 'neg)
                    (set! stack-data (safe-cons (- (car stack-data)) (cdr stack-data)))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter)   stack-return))
                   ;; Операции сравнения
                   ;; #f <=> 0; #t <=> -1
                   ((equal? x '=)
                    (set! stack-data (safe-cons (if (= (car stack-data) (cadr stack-data)) 0 -1) (cddr stack-data)))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter)   stack-return ))
                   ((equal? x '>)
                    (set! stack-data (safe-cons (if (> (car stack-data) (cadr stack-data)) 0 -1) (cddr stack-data)))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter)   stack-return))
                   ((equal? x '<)
                    (set! stack-data (safe-cons (if (< (car stack-data) (cadr stack-data)) 0 -1) (cddr stack-data)))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter)   stack-return))
                   ;; Логические операции
                   ((equal? x 'not)
                    (set! stack-data (cons (if (= (car stack-data) 0) 0 -1) (cddr stack-data)))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter)   stack-return ))
                   ((equal? x 'and)
                    (set! stack-data (cons (if (or (= (car stack-data) 0) (= (cadr stack-data) 0)) 0 -1) (cddr stack-data)))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter) stack-return))
                   ((equal? x 'or)
                    (set! stack-data (cons (if (and (= (car stack-data) 0) (= (cadr stack-data) 0)) 0 -1) (cddr stack-data)))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter) stack-return ))
                   ;;Операции со стеком
                   ((equal? x 'drop)
                    (set! stack-data (list-drop stack-data))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter)   stack-return ))
                   ((equal? x 'swap)
                    (set! stack-data (list-swap stack-data))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter)   stack-return ))
                   ((equal? x 'dup)
                    (set! stack-data (list-dup stack-data))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter)   stack-return ))
                   ((equal? x 'over)
                    (set! stack-data (list-over stack-data))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter)   stack-return ))
                   ((equal? x 'rot)
                    (set! stack-data (list-rot stack-data))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter)   stack-return ))
                   ((equal? x 'depth)
                    (set! stack-data (list-depth stack-data) )
                    (do-all arr-words (cdr now-program) (+ 1 word-counter) stack-return ))
                   ((equal? x 'define)
                    (interpret-define arr-words (cdr now-program)(+ 1 word-counter) stack-return ))
                   ((equal? x 'if)
                    (interpret-if arr-words (cdr now-program) (+ 1 word-counter)  stack-return ))
                   ((equal? x 'endif)
                    (do-all arr-words (cdr now-program) (+ 1 word-counter) stack-return))
                   ((assq x dict) ;(newline)(write (cadr (assq x dict))) (newline)
                    (set! stack-data (interpret-dict (cadr (assq x dict))))
                    (do-all arr-words (cdr now-program) (+ 1 word-counter)
                            
                            ;(do-all (append '(111) (cadr (assq x dict)) '(111)) (append '(111) (cadr (assq x dict)) '(111)) (+ 1 1 (length (cadr (assq x dict)))) stack-data stack-return dict)
                            stack-return))
                   (else '())))))));(display "coming_soon ")(display dict)(newline)(display x)(newline)(display now-program)(newline))))))))

(define (interpret-if arr-words now-program word-counter stack-return)
  (if (zero? (car stack-data))
      (begin
        (set! stack-data (cdr stack-data))
      (interpret-else arr-words now-program word-counter stack-return))
      (begin
        (set! stack-data (cdr stack-data))
        (do-all arr-words now-program word-counter stack-return))))

(define (interpret-else arr-words now-program word-counter stack-return)
  (if (equal? (car now-program) 'endif)
      (do-all arr-words (cdr now-program) (+ 1 word-counter) stack-return )
      (interpret-else arr-words (cdr now-program) (+ 1 word-counter) stack-return )))