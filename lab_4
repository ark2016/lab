(define (interpret program stack)
  (do-all (vector->list program) (vector->list program) 0 stack '() '()))
;(car (do-all ...))?
(define (do-all arr-words now-program word-counter stack-data stack-return dict)
  (let ((program arr-words))
    (cond((=(length arr-words)word-counter)  (display stack-data))
         ((number? (car now-program))
          (do-all arr-words (cdr now-program) (+ 1 word-counter) (cons (car now-program) stack-data)  stack-return dict))
         (else (let ((x (car now-program)))
                 (cond ((equal? x '+)
                        (do-all arr-words (cdr now-program) (+ 1 word-counter) (cons (+ (car stack-data) (cadr stack-data)) (cddr stack-data)) stack-return dict))
                       ((equal? x '-)
                        (do-all arr-words (cdr now-program) (+ 1 word-counter) (cons (- (car stack-data) (cadr stack-data)) (cddr stack-data))  stack-return dict))
                       ((equal? x '*)
                        (do-all arr-words (cdr now-program) (+ 1 word-counter) (cons (* (car stack-data) (cadr stack-data)) (cddr stack-data))  stack-return dict))
                       ((equal? x '/)
                        (do-all arr-words (cdr now-program) (+ 1 word-counter) (cons (/ (car stack-data) (cadr stack-data)) (cddr stack-data))  stack-return dict))
                       ((equal? x 'mod)
                        (do-all arr-words (cdr now-program) (+ 1 word-counter) (cons (remainder (car stack-data) (cadr stack-data)) (cddr stack-data))  stack-return dict))
                       ((equal? x 'neg)
                        (do-all arr-words (cdr now-program) (+ 1 word-counter) (cons (- (car stack-data)) (cdr stack-data))  stack-return dict))
                       ((equal? x '=)
                        (do-all arr-words (cdr now-program) (+ 1 word-counter) (cons (if (= (car stack-data) (cadr stack-data)) 0 -1) (cddr stack-data))  stack-return dict))
                       ((equal? x '>)
                        (do-all arr-words (cdr now-program) (+ 1 word-counter) (cons (if (> (car stack-data) (cadr stack-data)) 0 -1) (cddr stack-data))  stack-return dict))
                       ((equal? x '<)
                        (do-all arr-words (cdr now-program) (+ 1 word-counter) (cons (if (< (car stack-data) (cadr stack-data)) 0 -1) (cddr stack-data))  stack-return dict))
                       (else (display 'coming_soon))))))))
